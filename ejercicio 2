#include <iostream>
#include "polygonarray.h"

using namespace std;

int main()
{
    polygon p(1,3);
    polygon q(3,3);
    polygon r(3,1);
    polygon arr[]={p,q,r};
    int size = sizeof(arr)/sizeof(arr[0]);
    polygon pa2(arr,size);
    polygon pa=pa2;
    cout<<pa.getsize()<<endl;
    pa.clear();
    cout<<pa.getsize()<<endl;

    return 0;

}















#ifndef POINT _H
#define POINT _H


using namespace std;


class polygon {
    int x,y;

public:
    Polygon(int xx=0,int yy=0){x= xx ; y= yy;};
        int getX()const{return x;};
        int getY()const{return y;};
        void setX(const int xx){x=xx;};
        void setY(const int yy){y=yy;};

 };


class pointarray
{
    int size;
    polygon *polygons;
    void resize(int size);

    public:

        pointarray();
        pointarray(const polygon pts[],const int size);
        pointarray(polygonarray &o);
        ~pointarray();

        void print();
        void insert(const int pos , const polygon &p);
        void remove(const int pos);
        void clear();
        void push


};

#endif // POINT _H

























include <iostream>
#include "polygonarray.h"
using namespace std;


polygonarray::polygonarray()
{
        this->size = 0;
        this->polygons = new polygon[size];
}

polygonarray::polygonarray(const polygon pts[],const int size;)
{
    this->size = size;
    this->polygons = new polygon[size];
    for(int i=0; i<size ;i++)
        polygons[i]= pts[i];
}

 polygonarray::printarray(pointarray &o)
{
   this->size = o.size;
   this->polygons = new polygon[size];
   for(int i=0; i<size;i++)
    polygons[i] =o.polygons[i];
}
void polygonarray::insert(const in pos, const polygon &p){
    resize(resize +1);
    for(int i=size-1;i<pos;i--)
        polygons[i]=polygons[i-1];
    polygons[pos] = p ;


}
void polygonarray::resize(int newsize){
    polygon *pts = new polygon[newsize];
    int minsize =(newsize>size)?size:newsize;
    for(int i=0;i<minsize;i++)
        pts[i]=polygons[i];
            delete[] polygons;
            size = newsize;
            polygons = pts;

}

void polygonarray::clear()
{
    resize(o);

int polygonarray::getsize()
{
return size;
}

polygon::~polygon()
{
    delete[] polygons;
}




















v
