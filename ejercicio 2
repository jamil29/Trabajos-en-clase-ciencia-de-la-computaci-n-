#include <iostream>
#include "polygonarray.h"

using namespace std;

int main()
{
    polygon p(1,3);
    polygon q(3,3);
    polygon r(3,1);
    polygon arr[]={p,q,r};
    int size = sizeof(arr)/sizeof(arr[0]);
    polygon pa2(arr,size);
    polygon pa=pa2;
    cout<<pa.getsize()<<endl;
    pa.clear();
    cout<<pa.getsize()<<endl;

    return 0;

}







#ifndef POLYGON_H
#define POLYGON_H
#include <iostream>

using namespace std;

class Polygon
{
    public:
        Polygon(int, int);
        void area();
        Polygon();

    protected:
        int width;
        int height;

};

#endif // POLYGON_H





#ifndef POLYGONARRAY_H
#define POLYGONARRAY_H
#include "Polygon.h"

#include <iostream>

using namespace std;

class PolygonArray
{
    public:
        PolygonArray();
        PolygonArray(const Polygon pts[], int size);
        PolygonArray(PolygonArray &p);
        ~PolygonArray();

        void area();
        int getSize();
        void push_back(const Polygon &p);
        void insert(const int, const Polygon &p);
        void remove(const int);

    private:
        int size;
        Polygon *polygons;
        void resize(int resize);
};

#endif // POLYGONARRAY_H


#include "PolygonArray.h"
#include "Polygon.h"

#include <iostream>

using namespace std;

PolygonArray::PolygonArray()
{
    this->size=0;
    this->polygons=new Polygon[size];
}

PolygonArray::PolygonArray(const Polygon pts[], int size)
{
    this->size=size;
    this->polygons=new Polygon[size];
    for(int i=0; i<size ; i++){
        polygons[i]=pts[i];
    }
}

PolygonArray::PolygonArray(PolygonArray &p)
{
    this->size=p.size;
    this->polygons=new Polygon[p.size];
    for(int i=0; i<size ; i++){
        polygons[i]=p.polygons[i];
    }
}

void PolygonArray::area()
{
    for(int i=0; i<size ; i++){
        polygons[i].area();
    }
}

int PolygonArray::getSize()
{
    return size;
}

void PolygonArray::resize(int newSize)
{
    Polygon *pts = new Polygon[newSize];
    int minsize = (newSize > size) ? size : newSize;
    for(int i=0; i<minsize ; i++)
        pts[i] = polygons[i];

    delete[] polygons;

    size = newSize;
    polygons = pts;

}

void PolygonArray::insert(const int pos, const Polygon &p)
{
    resize(size+1);
    for(int i= size-1; i>pos ; i--){
        polygons[i]=polygons[i-1];
    }
    polygons[pos]=p;

}

void PolygonArray::push_back(const Polygon &p)
{
    resize(size+1);
    polygons[size-1]=p;
}

void PolygonArray::remove(const int pos)
{
    for(int i=pos; i<size-1 ; i++)
        polygons[i]=polygons[i++];
    resize(size-1);
}

PolygonArray::~PolygonArray()
{
    delete[] polygons;
}



#ifndef ARRAY_H
#define ARRAY_H
#include <iostream>
#include "Polygon.h"
using namespace std;

class Array
{
    public:
        Array(){
            sizee = 0;
            data = new Polygon*[sizee];
        }
        Array(Polygon **ndata,int nsize){
            sizee = nsize;
            data = new Polygon*[sizee];
            for(int i = 0;i < sizee;i++)
                data[i] = ndata[i];
        }
        Array(const Array &o){
            sizee = o.sizee;
            data = new Polygon*[sizee];
            for(int i = 0;i < sizee;i++)
                data[i] = o.data[i];
        }
        void Push_back(Polygon *val){
            resizee(sizee + 1);
            data[sizee - 1] = val;
        }

       void Insert(Polygon *val,int pos){
             if(pos >= 0 && pos < sizee){
                resizee(sizee + 1);
                for(int i = sizee-1;i > pos;i--)
                    data[i] = data[i-1];
                data[pos] = val;
            }
        }

        void Remove(int pos){
            if( pos >= 0 && pos < sizee) {
                for(int i = pos; i < sizee - 1; i++)
                    data[i] = data[i + 1];
                resizee(sizee - 1);
            }
        }

        void print(){
            for(int i = 0;i < sizee;i++)
                data[i]->print_area();
            cout << endl;
        }
        ~Array(){delete[] data;}

    private:
        Polygon **data;
        int sizee;
        void resizee(int newsize){
            Polygon **ptr = new Polygon*[newsize];
            int minsize =((newsize > sizee)? sizee : newsize);
            for(int i = 0;i < minsize;i++)
                ptr[i] = data[i];
            delete[] data;
            sizee = newsize;
            data = ptr;
        }
};

#endif // ARRAY_H






v
