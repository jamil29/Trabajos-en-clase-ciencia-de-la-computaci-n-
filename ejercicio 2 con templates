#include "PointArray.h"
#include "Point.h"
#include <iostream>

using namespace std;

template<class T>
PointArray<T>::PointArray()
{
    this->size=0;
    this->points=new Point<T>[size];
}

template<class T>
PointArray<T>::PointArray(const Point<T> pts[], const int size)
{
    this->size=size;
    this->points=new Point<T>[size];
    for(int i=0; i<size; i++)
        points[i]=pts[i];
}

template<class T>
PointArray<T>::PointArray(PointArray<T> &o)
{
    this->size=o.size;
    this->points=new Point<T>[o.size];
    for(int i=0; i<size ; ++i)
        points[i]=o.points[i];
}

template<class T>
void PointArray<T>::resize(int newSize){
    Point<T> *pts = new Point<T>[newSize];
    int minsize = (newSize > size) ? size : newSize;
    for(int i=0; i<minsize ; i++)
        pts[i] = points[i];
    delete[] points;
    size = newSize;
    points = pts;
}

template<class T>
void PointArray<T>::push_back(const Point<T> &p){
    resize(size + 1);
    points[size - 1] = p;
}

template<class T>
void PointArray<T>::insert(const int pos, const Point<T> &p){ //posiciÃ³n que quieres insert
    resize(size + 1);
    for(int i=size-1; i>pos ; i--)
        points[i]=points[i-1];
    points[pos]=p;
}

template<class T>
void PointArray<T>::remove(const int pos){
    for(int i=pos; i<size-1 ; i++)
        points[i]=points[i+1];
    resize(size-1);


}

template<class T>
int PointArray<T>::getSize()
{
    return size;
}

template<class T>
void PointArray<T>::print(){
    for(int i=0; i<size; i++)
        points[i].print();
}

template<class T>
PointArray<T>::~PointArray()
{
    delete[] points;
}

#include "Point.h"
#include <iostream>

using namespace std;

template<class T>
Point<T>::Point(T xh, T yh)
{
    x=xh;
    y=yh;
}

template<class T>
Point<T>::Point()
{
    x=0;
    y=0;
}

template<class T>
Point<T>::Point(Point<T> &o)
{
    x=o.x;
    y=o.y;
}

template<class T>
void Point<T>::print()
{
    std::cout << "(" << x << "," << y << ")" << std::endl;
}

template<class T>
void Point<T>::offset(T nx, T ny)
{
    x+=nx;
    y+=ny;
}









#ifndef POINT_H
#define POINT_H

template<class T>
class Point
{
    public:
        Point();
        Point(Point<T> &o);
        Point(T,T);
        void offset(T,T);
        void print();

    private:
        T x,y;
};

#endif // POINT_H







#ifndef POINTARRAY_H
#define POINTARRAY_H

#include "Point.h"

template<class T>
class PointArray
{
    public:
        PointArray();
        PointArray(const Point<T> pts[], const int size);
        PointArray(PointArray<T> &o);
        ~PointArray();

        void print();
        int getSize();
        void push_back(const Point<T> &p);
        void insert(const int , const Point<T> &p);
        void remove(const int);

    private:
        int size;
        Point<T> *points;
        void resize(int newSize);
};
#endif // POINTARRAY_H






#include "Point.h"
#include "PointArray.h"
#include <iostream>
#include <cctype>

using namespace std;

int main()
{

    Point <int , int>a (1,2);
//    cout << print<int> (1,2) << endl;
    return 0;
}
