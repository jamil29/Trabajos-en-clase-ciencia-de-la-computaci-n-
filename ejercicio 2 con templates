#include <iostream>
#include "pointarray.h"
using namespace std;

template<typename t >
pointarray<t>::pointarray()
{
        this->size = 0;
        this->points = new point[size];
}
template<typename t>
pointarray<t>::pointarray(t point pts[],const int size;)
{
    this->size = size;
    this->points = new point[size];
    for(int i=0; i<size ;i++)
        points[i]= pts[i];
}
template<typename t>
 pointarray<t>::printarray(pointarray &o)
{
   this->size = o.size;
   this->points = new point[size];
   for(int i=0; i<size;i++)
    points[i] =o.points[i];
}
template<typename t>
void pointarray<t>::insert(const t pos, const point &p){
    resize(resize +1);
    for(int i=size-1;i<pos;i--)
        points[i]=points[i-1];
    points
}
template<typename t>
void pointarray<t>::resize(int newsize){
    point *pts = new point[newsize];
    int minsize =(newsize>size)?size:newsize;
    for(int i=0;i<minsize;i++)
        pts[i]=points[i];
            delete[] points;
            size = newsize;
            points = pts;
}
template<typename t>
void pointarray<t>::clear()
{
    resize(o);
template<typename t>
int pointarray<t>::getsize()
{
return size;
}
point::~point()
{
    delete[] points;
}





#ifndef POINT _H
#define POINT _H
using namespace std;

template<class t>
class pointarray
{
    public:
        pointarray();
        pointarray(const  t point  pts[],const int size);
        pointarray(pointarray &o);
        ~pointarray();

        t print();
        int getsize();
        t clear();

    private:
        t size;
        point *points;
        void resize(int);
};
#endif // POINT _H
template<typename t>
class point
{
    public:
        point ();
        point(t,t);
        void print();
        point(point &o);
        void offset(t,t);

    private:
        double x,y;
};

#include <iostream>
#include "point .h"

template<t>
template<typename t>
point<t> ::point (int xh, int yh)
{
        x= xh;

        y= yh;
}
template<typename t>
point<t> ::point ()
{
    x=0;
    y=0;
}
template<typename t>
void point<t>::print()
{
    std::cout<<"("<<x<<","<<y<<")"<<std::endl;
}
template<typename t>
point<t>::point(point &o){
    x=o.y;
    y=o.x;

}
template<typename t>
void point<t>::offset(int nx,int ny){
x +=nx;
y +=ny;
}

#include <iostream>
#include "point.h"
#include "pointarray.h"

using namespace std;



int main()
{
    point p(5,4);
    point q(6,7); //constructor:metodo que se invoca cuando se crea una instancia
    point *easy = new point;
    easy->print();
    delete easy;
    return 0;
    point p(1,3);
    point q(3,3);
    point r(3,1);
    point arr[]={p,q,r};
    int size = sizeof(arr)/sizeof(arr[0]);
    point pa2(arr,size);
    point pa=pa2;
    cout<<pa.getsize()<<endl;
    pa.clear();
    cout<<pa.getsize()<<endl;

    return 0;

}
